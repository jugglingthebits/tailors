Index: Tweed.Data.Test/TweedQueriesTest.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Moq;\nusing NodaTime;\nusing Raven.Client.Documents.Session;\nusing Xunit;\n\nnamespace Tweed.Data.Test;\n\npublic class TweedQueriesTest\n{\n    private static readonly ZonedDateTime FixedZonedDateTime =\n        new(new LocalDateTime(2022, 11, 18, 15, 20), DateTimeZone.Utc, new Offset());\n\n    [Fact]\n    public async Task StoreTweed_SavesTweed()\n    {\n        var session = new Mock<IAsyncDocumentSession>();\n\n        var queries = new TweedQueries(session.Object);\n        var tweed = new Models.Tweed\n        {\n            CreatedAt = FixedZonedDateTime,\n            AuthorId = \"123\"\n        };\n        await queries.StoreTweed(tweed);\n\n        session.Verify(s => s.StoreAsync(tweed, default));\n    }\n\n    [Fact]\n    public async Task StoreTweed_ValidatesAuthorId()\n    {\n        var session = new Mock<IAsyncDocumentSession>();\n\n        var queries = new TweedQueries(session.Object);\n        var tweed = new Models.Tweed\n        {\n            CreatedAt = FixedZonedDateTime\n        };\n        await Assert.ThrowsAsync<ArgumentException>(async () => await queries.StoreTweed(tweed));\n    }\n\n    [Fact]\n    public async Task StoreTweed_ValidatesCreatedAt()\n    {\n        var session = new Mock<IAsyncDocumentSession>();\n\n        var queries = new TweedQueries(session.Object);\n        var tweed = new Models.Tweed\n        {\n            AuthorId = \"123\"\n        };\n        await Assert.ThrowsAsync<ArgumentException>(async () => await queries.StoreTweed(tweed));\n    }\n\n    [Fact]\n    public async Task GetLatestTweeds_ShouldReturnTweeds()\n    {\n        using var ravenDb = new RavenTestDb();\n        using var session = ravenDb.Session;\n\n        Models.Tweed tweed = new()\n        {\n            Text = \"test\"\n        };\n        await session.StoreAsync(tweed);\n        await session.SaveChangesAsync();\n\n        var queries = new TweedQueries(session);\n        var tweeds = await queries.GetLatestTweeds();\n        Assert.NotEmpty(tweeds);\n    }\n\n    [Fact]\n    public async Task GetLatestTweeds_ShouldReturnOrderedTweeds()\n    {\n        using var ravenDb = new RavenTestDb();\n        using var session = ravenDb.Session;\n\n        Models.Tweed olderTweed = new()\n        {\n            Text = \"older tweed\",\n            CreatedAt = FixedZonedDateTime\n        };\n        await session.StoreAsync(olderTweed);\n        var recent = FixedZonedDateTime.PlusHours(1);\n        Models.Tweed recentTweed = new()\n        {\n            Text = \"recent tweed\",\n            CreatedAt = recent\n        };\n        await session.StoreAsync(recentTweed);\n        await session.SaveChangesAsync();\n\n        var queries = new TweedQueries(session);\n        var tweeds = (await queries.GetLatestTweeds()).ToList();\n        Assert.Equal(recentTweed, tweeds[0]);\n        Assert.Equal(olderTweed, tweeds[1]);\n    }\n\n    [Fact]\n    public async Task GetLatestTweeds_ShouldReturn20Tweeds()\n    {\n        using var ravenDb = new RavenTestDb();\n        using var session = ravenDb.Session;\n\n        var dateTime = FixedZonedDateTime;\n        for (var i = 0; i < 25; i++)\n        {\n            Models.Tweed tweed = new()\n            {\n                Text = \"test\",\n                CreatedAt = dateTime\n            };\n            await session.StoreAsync(tweed);\n        }\n\n        await session.SaveChangesAsync();\n\n        var queries = new TweedQueries(session);\n        var tweeds = (await queries.GetLatestTweeds()).ToList();\n        Assert.Equal(20, tweeds.Count);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Tweed.Data.Test/TweedQueriesTest.cs b/Tweed.Data.Test/TweedQueriesTest.cs
--- a/Tweed.Data.Test/TweedQueriesTest.cs	(revision fab544bf0a3f82457bd87de92ea39429dc4d71e0)
+++ b/Tweed.Data.Test/TweedQueriesTest.cs	(date 1669673458273)
@@ -96,8 +96,8 @@
 
         var queries = new TweedQueries(session);
         var tweeds = (await queries.GetLatestTweeds()).ToList();
-        Assert.Equal(recentTweed, tweeds[0]);
-        Assert.Equal(olderTweed, tweeds[1]);
+        Assert.Equal(recentTweed.Id, tweeds[0].Id);
+        Assert.Equal(olderTweed.Id, tweeds[1].Id);
     }
 
     [Fact]
@@ -120,7 +120,7 @@
         await session.SaveChangesAsync();
 
         var queries = new TweedQueries(session);
-        var tweeds = (await queries.GetLatestTweeds()).ToList();
+        var tweeds = await queries.GetLatestTweeds();
         Assert.Equal(20, tweeds.Count);
     }
 }
